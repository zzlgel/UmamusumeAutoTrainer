from .define import *
from typing import Dict as _Dict
from collections import namedtuple as _nt
from abc import abstractmethod as _abm, ABC as _ABC

FiveAttr = _nt('FiveAttr', ('speed', 'stamina', 'pow', 'guts', 'wiz'),
               defaults=(0, 0, 0, 0, 0))
Birthday = _nt('Birth', ('year', 'month', 'day'))
TimeMinMax = _nt('TimeMinMAx', ('min', 'max'))


class Color(int):
    def __new__(cls, *args, **kwargs):
        res = args[0]
        if isinstance(res, (bytes, str)):
            res = int(res, 16)
        return super().__new__(cls, res)

    @property
    def _t(self):
        return self // 256

    @property
    def r(self):
        return self._t // 256

    @property
    def g(self):
        return self._t % 256

    @property
    def b(self):
        return self % 256

    def __str__(self):
        return '%X' % self

    __repr__ = __str__


class TextData(dict):
    """
    ÊñáÂ≠ó‰ø°ÊÅØ
    text_data

    Â∑≤Áü•ÂØπÂ∫îÔºö
    1 Á≥ªÁªü
    2 ÈîôËØØ
    3, 63 ÊïôÁ®ã
    4 ÂÖªÊàê‰ºòÈ™èÂ∞ëÂ•≥ÂÖ®Âêç
    5 ÂÖªÊàê‰ºòÈ™èÂ∞ëÂ•≥ÂâçÁºÄ
    6 ËßíËâ≤Âêç
    7 CV
    8 ÂÆøËàç
    9 ‰ΩìÈáç
    10, 24 ÈÅìÂÖ∑ËØ¥Êòé
    13, 26 Êâ≠Ëõã
    14, 15 ÊúçË£Ö
    16 Ê≠åÂêç
    17 ËØçÊõ≤Áºñ
    23 ÈÅìÂÖ∑Âêç
    25 ÈÅìÂÖ∑Êù•Ê∫ê
    27 Ëß£ËØ¥Âè∞ËØç
    28, 32, 36 Ëµõ‰∫ãÂÖ®Áß∞(28‰∏∫ÂÖªÊàêËµõ‰∫ã)
    29, 33, 38 Ëµõ‰∫ãÁÆÄÁß∞(Ë∑ùÁ¶ªÂú®33 2XXXX)
    31, 34 ËµõÂú∫
    35 Âú∞Âêç
    39 ÂïÜÂ∫ó‰∫§Êç¢
    40 ‰∫§Êç¢ËØ¶ÊÉÖ
    41 ÂäüËÉΩËß£ÈîÅËØ¥Êòé
    42, 49 ËØæÈáëÈÅìÂÖ∑Âêç„ÄÅËØ¥Êòé
    47 ÊäÄËÉΩÂêç
    48 ÊäÄËÉΩËØ¥Êòé
    55 ÂÖªÊàêÊåá‰ª§
    59 mobÂêç
    64 Êä•ÈÖ¨ËØ¥Êòé
    65, 66 Áß∞Âè∑„ÄÅËé∑ÂæóÊù°‰ª∂
    67 ‰ªªÂä°ÁõÆÊ†á
    68, 69 ËøáÂú∫Hint‰∏éÂ∞èÁßòÂØÜÊ†áÈ¢ò„ÄÅÂÜÖÂÆπ
    70 ÁôªÂΩïÂ•ñÂä±
    75 ÊîØÊè¥Âç°ÂÖ®Âêç
    76 ÊîØÊè¥Âç°ÂâçÁºÄ
    77 ÊîØÊè¥Âç°ËßíËâ≤
    78 ÊîØÊè¥Âç°ËßíËâ≤Ê≥®Èü≥
    88 ËßíËâ≤Ëé∑ÂæóÂè∞ËØç
    92 ËßíËâ≤ÂâßÊÉÖÊ†áÈ¢ò
    93, 112 ‰∏ªÁ∫øÁ´†ËäÇÁºñÂè∑„ÄÅÊ†áÈ¢ò
    94 ‰∏ªÁ∫øÂêÑËØùÊ†áÈ¢ò
    95 ‰∏ªÁ∫øÁõ∏ÂÖ≥ËßíËâ≤„ÄÅÊØîËµõÁ≠â
    96 ËØæÈáëÈôêÂÆöÈ°πÁõÆ„ÄÅ‰∏ªÁ∫øÂêÑËØùÁºñÂè∑
    97 ÁªøÂ∏ΩÂª∫ËÆÆ
    111 ËÉúÈûç
    113 Á¢éÁâá
    114 Á¢éÁâáËØ¥Êòé
    119, 120 ÂâßÊú¨ÂêçÁß∞„ÄÅËØ¥Êòé
    121 ÊÆµ‰Ωç
    128 Ê≠åÊõ≤ËØ¥Êòé
    130, 131 ÂÜ†Âêç„ÄÅÂèñÂæóÊñπÂºè
    133 ‰ºòËÉúrei Shoes GradeMedal
    136 ËßÇ‰ºóAB 2‰∫∫3‰∫∫
    138 ÂÖªÊàêÂõûÂêàÊ†áÈ¢ò 1-25ËÆ≠ÁªÉ 26-28Âá∫Ë°å 29-33ÂêàÂÆøËÆ≠ÁªÉ 34ÂêàÂÆøÂá∫Ë°å 35Ê∏©Ê≥â 59-66ÂêéÈù¢ÂâßÊú¨ÁöÑ
    139 ÁêÜ‰∫ãÈïøÁ¢éÁ¢éÂøµ
    140, 141 Á´ûÊäÄÂú∫ÂæóÂàÜÈ°πÁõÆ„ÄÅËØ¥Êòé
    142, 143 ÂÖªÊàêÁä∂ÊÄÅ„ÄÅËØ¥Êòé
    144 ËßíËâ≤ÁÆÄ‰ªã
    147, 172 Âõ†Â≠ê„ÄÅËØ¥Êòé
    148 Á´ûÊäÄÂú∫Bonus
    150, 155 ÊîØÊè¥Âç°Âõ∫ÊúâÊïàÊûúÂêçÔºàÂç≥Âç°Âêç(76)Ôºâ„ÄÅËØ¥Êòé
    151, 154 ÊîØÊè¥Âç°ÊïàÊûú„ÄÅËØ¥Êòé
    152, 264 NPC
    157-162 ËßíËâ≤ÁîüÊó•„ÄÅScale„ÄÅËÑöË¥®„ÄÅÂú∫Âú∞„ÄÅË∑ùÁ¶ªÈÄÇÊÄß„ÄÅÂ≠¶ÈÉ®
    163-169 ËßíËâ≤Ëá™Êàë‰ªãÁªç„ÄÅÁà±Â•Ω„ÄÅËã¶Êâã„ÄÅËÄ≥Êúµ„ÄÅÂ∞æÂ∑¥„ÄÅÈûãÁ†Å„ÄÅÂÆ∂‰∫∫
    170 ËßíËâ≤ÂêçÔºàÊ°£Ê°àÔºâ
    171 ËØ≠Èü≥Ê†áÈ¢ò
    173 ËÅå‰∏ö
    174 ÊãÖÂΩìÈ©¨Â®ò
    175 Ê°£Ê°àÈ°πÁõÆ
    258 My Rule
    259 ÊâãÊú∫Â£ÅÁ∫∏
    260 ËµõÂâç
    261 ÂæóÊÑèÁßëÁõÆ
    262 Ëá™Êª°
    263 Â∏∏Ë¥≠
    176, 197 Á¢éÈíªÂõûTP„ÄÅRP
    177 ÊäΩÂ•ñÂ•ñÂìÅ
    178-180 ÂÖªÊàêÁªôÁöÑÂêÑÁßçÁ∫™ÂøµÂìÅ
    181 ÂÖªÊàê‰∫ã‰ª∂
    182 ËßíËâ≤Ê≥®Èü≥
    184 TPÊª°ÊèêÁ§∫
    185 RPÊª°ÊèêÁ§∫
    186 ÊîØÊè¥Âç°Âº∫Âåñ
    187, 188 ÈôêÂÆöÊ¥ªÂä®„ÄÅËØ¥Êòé
    189 ÈôêÂÆöÊ¥ªÂä®ÂêçÁß∞
    190 ÈôêÂÆö‰ªªÂä°
    191 ‰ªªÂä°ÂâßÊÉÖÊ†áÈ¢ò
    192 Âú∞ÁÇπ
    193-195 ÈòüÂêçÁ≠â
    196 ÂπøÂëä
    198-200 ÂâßÊú¨ÈìæÊé•Âç°ËØ¥Êòé
    201-204 Ëß£ËØ¥ÂÆûÂÜµÂè∞ËØç
    205 ÂòöÁëü
    206 Â§ñÂõΩÊØîËµõÁî®ËØ≠
    207-208 ÂêÑÁßçÊïàÊûú
    209 üëÜÊïàÊûúÊù•Ê∫ê
    210 Ê≠å
    211 Ê¥ªÂä®È¢ÑÂëäÊ†áÈ¢ò
    212 È¢ÑÂëäÂÜÖÂÆπ
    214 Ê¥ªÂä®Ê†áÈ¢ò
    215-216 XXÁöÑÈ©¨Â®ò
    217 ‰ªãÁªçÊù°‰ª∂
    218 ÈùíÊò•ÊùØÊØîËµõ
    220 ‰ªãÁªçË∞¢ËØ≠
    221 Âë®Âπ¥Ê¥ªÂä®Ê†áÈ¢ò
    222 Âë®Âπ¥ÂâßÂú∫Ê†áÈ¢ò
    223 Âú∞ÁÇπ
    225, 226 ÈÅìÂÖ∑„ÄÅËØ¥Êòé
    227 ÂØπÂ∫î193
    228 ÊüêÂè∞ËØç
    229-232 ÂÆûÂÜµËß£ËØ¥ÂæÄÁ©∫ÈáåÂ°´ÁöÑËØç
    233 564Ê®°ÂºèÂíåÈ¨º564Ê®°Âºè
    234-236 Êä•ÈÖ¨ „Ç≤„Éº„Ç∏ ShowTime
    237 ÂâßÊú¨Âêç
    238 ÊïàÊûú
    239 Ê®°ÂºèËØ¥Êòé
    240 ÂêéÈù¢ÂâßÊú¨ËÆ°Êï∞
    241-242 Racing Carnival
    243, 244 Á´ûÊäÄÂú∫ÂæóÂàÜÈ°π„ÄÅËØ¥Êòé
    245 Ê®°ÂºèÊïàÊûú
    246 ÂØåÂ£´Âíå564ÂèëÂ•ñ
    247 Áúã‰∏äÂéªÂæàÂº∫ÁöÑTitle
    248 Top Uma Dol Project
    249 247ÁöÑÊù°‰ª∂
    250 Grand LiveÁöÑLive
    251 Âêå248
    252 GLËÇ≤Êàê‰ªªÂä°
    253-256 ËØ¥Êòé
    257 CPÂá∫Ëµ∞
    265 ÁõÆÊåá„ÅõÔºÅÊúÄÂº∑„ÉÅ„Éº„É†
    266 ÂπøÂëä
    267 LArcÁöÑÁßçÁßç
    268
    294 ÂçèÂä©Âç°ÊïàÊûú
    """

    def __init__(self, data: list):
        t = {}
        for datum in data:
            assert datum['id'] == datum['category']
            t.setdefault(datum['id'], {})
            t[datum['id']][datum['index']] = datum['text']
        super().__init__(t)


class Effect:
    """‰∫ã‰ª∂ÊïàÊûúÔºåtext_data 238"""

    def __init__(self, effect: str):
        self._effect_raw = effect
        self._effect_list_raw = effect.split('„ÄÅ')


class Choice:
    option: str
    success_effect: Effect
    failed_effect: Effect

    def __init__(self, choice: list):
        self._choice_raw = choice[0].copy()
        self.option = self._choice_raw.get('Option')
        self.success_effect = Effect(self._choice_raw.get('SuccessEffect'))
        self.failed_effect = Effect(self._choice_raw.get('FailedEffect'))


class Event:
    """ÂÖªÊàê‰∫ã‰ª∂"""
    id: int
    "ËÆ∞ÂΩïÂú®master.mdb‰∏≠ÁöÑstory_id"
    name: str
    "ËÆ∞ÂΩïÂú®master.mdb‰∏≠ÁöÑ‰∫ã‰ª∂Âêç(181)"
    trigger_name: str
    "‰∫ã‰ª∂ÊâÄÂ±ûËßíËâ≤ÔºåÈÄöÁî®‰∫ã‰ª∂‰∏∫È©¨Â®òÂêçÔºåÂÜ≥ËÉúÊúç/SÂç°‰∫ã‰ª∂‰∏∫ÂÖ®Âêç"
    choices: list[Choice]

    def __init__(self, event: dict):
        self.id = event.get('Id')
        self.name = event.get('Name')
        self.trigger_name = event.get('TriggerName')
        self.choices = list(map(Choice, event.get('Choices')))
        self._event_raw = event.copy()

    def __str__(self):
        name = '  ' * (15 - len(self.name)) + self.name
        return "%s@%s: %s from %s" % (self.__class__.__name__,
                                      self.id,
                                      name,
                                      self.trigger_name)

    __repr__ = __str__


class SuccessEffect:
    select_index: int
    state: StoryState
    scenario: ScenarioType
    effect: Effect

    def __init__(self, choice: dict):
        self.select_index = choice.get('SelectIndex')
        self.state = StoryState(choice.get('State'))
        self.scenario = ScenarioType(choice.get('Scenario'))
        self.effect = Effect(choice.get('Effect'))
        self._choice_raw = choice.copy()


class SuccessEvent:
    id: int
    choice: list[list[SuccessEffect]]

    def __init__(self, success_event: dict):
        self.id = success_event.get('Id')
        self.choices = list(map(lambda x: list(map(SuccessEffect, x)), success_event.get('Choices')))
        self._success_event_raw = success_event.copy()

    def __str__(self):
        return "%s@%s with %s choice(s)" % (self.__class__.__name__,
                                            self.id,
                                            len(self.choices))

    __repr__ = __str__


class Meta(type):
    _cls = {}

    def __new__(metacls, name, base, attrs):
        if (args := (metacls, name, base, str(attrs.keys()))) not in metacls._cls:
            metacls._cls[args] = super().__new__(*args[:-1], attrs)
        return metacls._cls[args]

    def __call__(cls, *args, **kw):
        if kw:
            kw.update(cls.__dict__)
            return type(cls)(cls.__name__, cls.__bases__, kw)
        return super().__call__(*args)


class IdList(list):
    def __new__(cls, it, subscript='id'):
        self = super().__new__(cls, it)
        self._s = subscript
        return self

    def __init__(self, it, _s='id'):
        super().__init__(it)

    def __getitem__(self, s):
        s = getattr(s, self._s, s)
        return target[0] if (target := [x for x in self if getattr(x, self._s) == s]) \
            else super().__getitem__(s)


class Name:
    """ËßíËâ≤Âêç@6"""
    id: str
    "ËßíËâ≤IDÔºåÈÄöÂ∏∏‰∏∫4‰ΩçÊï∞Â≠óÔºå‰∏îÈ©¨Â®òÂùá‰∏∫1xxx"
    name: str
    "ËßíËâ≤ÁöÑÊú¨ÂêçÔºåÂ¶ÇÁæéÊµ¶Ê≥¢ÊóÅ"
    nickname: str
    "ÈïøÂ∫¶ÈôêÂÆö‰∏∫2Ê±âÂ≠óÁöÑÁÆÄÁß∞ÔºåÂ¶ÇÁæéÊµ¶Ê≥¢ÊóÅ=>Ê≥¢ÊóÅ"

    def __init__(self,
                 name: dict):
        self.id = name.get('Id')
        self.name = name.get('Name')
        self.nickname = name.get('Nickname')
        self._name_raw = name.copy()

    def __str__(self):
        return "%s @ %s aka %s" % (self.name,
                                   self.id,
                                   self.nickname)

    __repr__ = __str__


class Propers:
    def __init__(self, propers: dict):
        self.ground = GroundType(propers.get('Ground'))
        self.distance = DistanceType(propers.get('Distance'))
        self.style = StyleType(propers.get('Style'))
        self._propers_raw = propers.copy()

    def __str__(self):
        return str(self._propers_raw)

    __repr__ = __str__


class UpgradeSkill:
    def __init__(self, upgrade_skill: dict):
        self.condition_id = upgrade_skill.get('ConditionId')
        self.type = upgrade_skill.get('type')
        self.requirement = upgrade_skill.get('Requirement')
        self.additional_require = upgrade_skill.get('AdditionalRequirement')
        self._upgrade_skill_raw = upgrade_skill.copy()


class TalentSkill(metaclass=Meta):
    def __init__(self, talent_skill: dict):
        self.skill_id = talent_skill.get('SkillId')
        self.rank = talent_skill.get('Rank')
        self.upgrade_skills = dict(map(lambda x: (x[0], list(map(UpgradeSkill, x[1]))),
                                       talent_skill.get('UpgradeSkills').items()))
        self._talent_skill_raw = talent_skill.copy()

    def __str__(self):
        name = self.skills[self.skill_id].name if hasattr(self, 'skills') else ""
        return "%s@%s: %s" % (self.__class__.__name__,
                              self.skill_id,
                              name)

    __repr__ = __str__


class _Nameable(_ABC):
    """
    Âú®text_data‰∏≠ÊúâÂêçÂ≠óÁöÑÁ±ª
    Á±ªÂ∫îÂΩìÊúâ_name_index, ÂÆû‰æãÂ∫îÂΩìÊúâid
    Ëã•ËÆæÁΩÆ‰∫Ütext_data,
    ÂÆö‰πâÂêçÁß∞name‰∏∫text_data[_name_index][id]
    """
    id: int
    "master.mdb‰∏≠ÁöÑid"

    @_abm
    def _name_index(self):
        """text_data‰∏≠ÁöÑidÊàñcategory"""

    @staticmethod
    def set_text(text: dict):
        _Nameable._text = text

    @staticmethod
    def set_text_alter(text: dict):
        _Nameable._text_alter = text

    @property
    def name(self):
        """Â¶ÇÊûúÈÖçÁΩÆ‰∫Ütext, ËøîÂõûÂØπÂ∫îÂêçÁß∞ÔºåÂê¶ÂàôËøîÂõûÁ©∫‰∏≤"""
        try:
            string = self._text[self._name_index][self.id] if hasattr(self, '_text') else ''
        except KeyError:
            string = ''
        return string

    @property
    def name_alter(self):
        """Â¶ÇÊûúÈÖçÁΩÆ‰∫Ütext_alter, ËøîÂõûÂØπÂ∫îÂêçÁß∞ÔºåÂê¶ÂàôËøîÂõûÁ©∫‰∏≤"""
        try:
            string = self._text_alter[self._name_index][self.id] if hasattr(self, '_text_alter') else ''
        except KeyError:
            string = ''
        return string

    def __str__(self):
        return '%s: %s @ %4d' % (self.__class__.__name__,
                                 self.name, self.id)

    __repr__ = __str__


class TalentGroup:
    """
    ÂêÑÂÖªÊàê‰ºòÈ™èÂ∞ëÂ•≥ËßâÈÜíÊâÄÈúÄÊùêÊñô
    card_talent_upgrade
    """


class SkillSet:
    pass


class Chara(_Nameable):
    """
    ËßíËâ≤
    chara_data
    """
    name: Name
    id: int
    birth: Birthday
    last_year: int
    sex: Sex
    image_color_main: Color
    image_color_sub: Color
    ui_color_main: Color
    ui_color_sub: Color
    ui_training_color_1: Color
    ui_training_color_2: Color
    ui_border_color: Color
    ui_num_color_1: Color
    ui_num_color_2: Color
    ui_wipe_color_1: Color
    ui_wipe_color_2: Color
    ui_wipe_color_3: Color
    ui_speech_color_1: Color
    ui_nameplate_color_1: Color
    ui_nameplate_color_2: Color
    height: int
    bust: int
    scale: int
    skin: int
    shape: int
    socks: int
    personal_dress: int
    tail_model_id: int
    race_running_type: int
    ear_random_time: TimeMinMax
    tail_random_time: TimeMinMax
    story_ear_random_time: TimeMinMax
    story_tail_random_time: TimeMinMax
    attachment_model_id: int
    mini_mayu_shader_type: int
    start_date: int
    chara_category: int
    love_rank_limit: int
    _name_index = 6

    def __init__(self, chara: dict):
        self._chara = chara.copy()
        self.birth = Birthday(chara.pop('birth_year'),
                              chara.pop('birth_month'),
                              chara.pop('birth_day'))
        self.sex = Sex(chara.pop('sex'))
        for key in chara:
            if 'color' in key:
                setattr(self, key, Color(chara[key]))
            elif 'time' in key:
                time = getattr(self, key[:-4], TimeMinMax(0, 0))
                _min = time.min if 'max' in key else chara[key]
                _max = time.max if 'min' in key else chara[key]
                setattr(self, key[:-4], TimeMinMax(_min, _max))
            else:
                setattr(self, key, chara[key])


class _CharaBase(_Nameable):
    """
    ‰∏éËßíËâ≤Áõ∏ÂÖ≥ÁöÑÁ±ª
    Â∫îÂÖ∑Êúâchara_id
    Ëã•ËÆæÁΩÆ‰∫ÜËßíËâ≤Ë°®ÔºåÂèØÊ†πÊçÆidËøîÂõûËßíËâ≤
    """

    @_abm
    def _name_index(self):
        """text_data‰∏≠ÁöÑidÊàñcategory"""

    def chara_id(self):
        """master.mdb‰∏≠ÁöÑËßíËâ≤id"""

    @staticmethod
    def set_chara(chara_list: IdList[Chara] | _Dict[int, Chara]):
        _CharaBase._chara = chara_list

    @property
    def chara(self):
        """Â¶ÇÊûúÈÖçÁΩÆ‰∫Üchara, ËøîÂõûÂØπÂ∫îËßíËâ≤ÔºåÂê¶ÂàôËøîÂõûÁ©∫ÂÄº"""
        return self._chara[self.chara_id] if hasattr(self, '_chara') else None

    def __str__(self):
        return '%s: %s%s @ %d' % (self.__class__.__name__,
                                  self.name, self.chara.name, self.id)

    __repr__ = __str__


class Card(_CharaBase):
    """
    ÂÖªÊàê‰ºòÈ™èÂ∞ëÂ•≥
    card_data
    ÂÖ®Âêç4ÔºåÂâçÁºÄ5
    """
    _name_index = 5
    id: int
    "master.mdb card_data‰∏≠ÁöÑid"
    name: str
    "ÂâçÁºÄ"
    chara_id: int
    "ËßíËâ≤id"
    chara: Chara
    "ËßíËâ≤"
    default_rarity: int
    "ÂàùÂßãÊòüÊï∞"
    limited_chara: bool
    "ÊòØÂê¶ÈôêÂÆö"
    available_skill_set: SkillSet
    "ÊäÄËÉΩÁªÑ"
    talent: FiveAttr
    "Â±ûÊÄßÂä†Êàê%"
    talent_group: TalentGroup
    "ËßâÈÜíÁ¥†Êùê"
    running_style: StyleType
    "ÈªòËÆ§Ë∑ëÊ≥ï"

    def __init__(self, card: dict):
        self._card = card.copy()
        self.limited_chara = bool(card.pop('limited_chara'))
        self.talent = FiveAttr(card.pop('talent_speed'),
                               card.pop('talent_stamina'),
                               card.pop('talent_pow'),
                               card.pop('talent_guts'),
                               card.pop('talent_wiz'))
        self.running_style = StyleType(card.pop('running_style'))
        for key in card:
            setattr(self, key, card[key])


class SupportCardEffect(dict):
    """
    ÂçèÂä©Âç°ÊïàÊûúÊï∞ÊçÆÔºåÊù•Ê∫ê‰∏∫support_card_effect_table

    # id: int
    # "master.mdb‰∏≠ÁöÑidÔºåÁ¨¨‰∏Ä‰Ωç‰∏∫Á®ÄÊúâÂ∫¶"
    # type: SupportCardEffectType
    # "ÊïàÊûúÁ±ªÂûã"
    # limit: tuple[int]
    # "‰ªéÂàùÂßãÂà∞50Á∫ßÊØè5Á∫ßÁöÑÊïàÊûúÊï∞ÂÄºÔºåÂÖ±11È°π"
    """
    def __init__(self, effects: list[dict]):
        super().__init__(())
        for effect in effects:
            self.setdefault(effect['id'], {})
            self[effect['id']][effect['type']] = [effect['init']]
            limit = self[effect['id']][effect['type']]
            for lv in range(5, 51, 5):
                limit.append(effect[f'limit_lv{lv}'])


class SupportCardUniqueEffect:
    """
    ÂçèÂä©Âç°ÁâπÊÆäÊïàÊûúÔºåÂç≥Âç°Èù¢Âõ∫ÊúâÂä†Êàê
    Êù•Ê∫ê‰∏∫support_card_unique_effect
    Âç°ÁâáÂêçÁß∞ËßÅtext_data 150
    Âõ∫ÊúâÊïàÊûúÊèèËø∞ËßÅtext_data 155
    """
    id: int
    "master.mdb‰∏≠ÁöÑidÔºåÁ¨¨‰∏Ä‰Ωç‰∏∫Á®ÄÊúâÂ∫¶"
    lv: int
    "Âõ∫ÊúâÊäÄËÉΩÁöÑÂèëÂä®Á≠âÁ∫ß"
    effect: _Dict[SupportCardEffectType, int]
    "ÊïàÊûúÔºöSupportCardEffectType: Êï∞ÂÄº"

    def __init__(self, effect: dict):
        self.id = effect['id']
        self.lv = effect['lv']
        self.effect = {
            effect['type_0']: effect['value_0'],
            effect['type_1']: effect['value_1'],
        }


class SupportCard(_CharaBase):
    _name_index = 76
    id: int
    command_id: CommandType
    support_card_type: SupportCardType

    def __init__(self, support: dict):
        self._support = support.copy()
        self.command_id = CommandType(support.pop('command_id'))
        self.support_card_type = SupportCardType(support.pop('support_card_type'))
        for key in support:
            setattr(self, key, support[key])


class SupportCardChara(SupportCard):
    _name_index = 77

    def __init__(self, support: SupportCard):
        super().__init__(support._support)


class Skill(_Nameable):
    """ÊäÄËÉΩ"""
    _name_index = 47
    name: str

    def __init__(self, skill: dict):
        self._j_name = skill.get('Name')
        self.id = skill.get('Id')
        self.group_id = skill.get('GroupId')
        self.rarity = skill.get('Rarity')
        self.rate = skill.get('Rate')
        self.grade = skill.get('Grade')
        self.cost = skill.get('Cost')
        self.display_order = skill.get('DisplayOrder')
        self.upgrade = skill.get('Upgrade')
        self.propers = tuple(map(Propers, skill.get('Propers')))
        self.category = skill.get('Category')
        self._skill_raw = skill.copy()

    @property
    def name(self):
        return super().name or self._j_name

    @property
    def name_alter(self):
        return super().name_alter or self._j_name

    @property
    def j_name(self):
        return self._j_name


class NullableIntStringDictionary(dict):
    def __getitem__(self, item):
        if item in self:
            return super().__getitem__(item)
        else:
            return "Êú™Áü•"


class GradeRank:
    id: int
    min_value: int
    "Êª°Ë∂≥ËØ•ËØÑÂàÜÊâÄÈúÄÁöÑÊúÄ‰ΩéËØÑ‰ª∑ÁÇπ"
    max_value: int
    "Êª°Ë∂≥ËØ•ËØÑÂàÜÊâÄÈúÄÁöÑÊúÄÈ´òËØÑ‰ª∑ÁÇπ"

    @property
    def rank(self):
        return {
            1: "[grey46]G[/]",
            2: "[grey46]G+[/]",
            3: "[mediumpurple3_1]F[/]",
            4: "[mediumpurple3_1]F+[/]",
            5: "[pink3]E[/]",
            6: "[pink3]E+[/]",
            7: "[deepskyblue3_1]D[/]",
            8: "[deepskyblue3_1]D+[/]",
            9: "[darkolivegreen3_1]C[/]",
            10: "[darkolivegreen3_1]C+[/]",
            11: "[palevioletred1]B[/]",
            12: "[palevioletred1]B+[/]",
            13: "[darkorange]A[/]",
            14: "[darkorange]A+[/]",
            15: "[lightgoldenrod2_2]S[/]",
            16: "[lightgoldenrod2_2]S+[/]",
            17: "[lightgoldenrod2_2]SS[/]",
            18: "[lightgoldenrod2_2]SS+[/]",
            19: "[mediumpurple1]U[mediumpurple2]G[/][/]",
            20: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]1[/][/]",
            21: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]2[/][/]",
            22: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]3[/][/]",
            23: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]4[/][/]",
            24: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]5[/][/]",
            25: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]6[/][/]",
            26: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]7[/][/]",
            27: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]8[/][/]",
            28: "[mediumpurple1]U[mediumpurple2]G[/][purple_2]9[/][/]",
            29: "[mediumpurple1]U[mediumpurple2]F[/][/]",
            30: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]1[/][/]",
            31: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]2[/][/]",
            32: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]3[/][/]",
            33: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]4[/][/]",
            34: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]5[/][/]",
            35: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]6[/][/]",
            36: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]7[/][/]",
            37: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]8[/][/]",
            38: "[mediumpurple1]U[mediumpurple2]F[/][purple_2]9[/][/]",
            39: "[mediumpurple1]U[mediumpurple2]E[/][/]",
            40: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]1[/][/]",
            41: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]2[/][/]",
            42: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]3[/][/]",
            43: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]4[/][/]",
            44: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]5[/][/]",
            45: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]6[/][/]",
            46: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]7[/][/]",
            47: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]8[/][/]",
            48: "[mediumpurple1]U[mediumpurple2]E[/][purple_2]9[/][/]",
            49: "[mediumpurple1]U[mediumpurple2]D[/][/]",
            50: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]1[/][/]",
            51: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]2[/][/]",
            52: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]3[/][/]",
            53: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]4[/][/]",
            54: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]5[/][/]",
            55: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]6[/][/]",
            56: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]7[/][/]",
            57: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]8[/][/]",
            58: "[mediumpurple1]U[mediumpurple2]D[/][purple_2]9[/][/]",
            59: "[mediumpurple1]U[mediumpurple2]C[/][/]",
            60: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]1[/][/]",
            61: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]2[/][/]",
            62: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]3[/][/]",
            63: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]4[/][/]",
            64: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]5[/][/]",
            65: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]6[/][/]",
            66: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]7[/][/]",
            67: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]8[/][/]",
            68: "[mediumpurple1]U[mediumpurple2]C[/][purple_2]9[/][/]",
            69: "[mediumpurple1]U[mediumpurple2]B[/][/]",
            70: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]1[/][/]",
            71: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]2[/][/]",
            72: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]3[/][/]",
            73: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]4[/][/]",
            74: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]5[/][/]",
            75: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]6[/][/]",
            76: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]7[/][/]",
            77: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]8[/][/]",
            78: "[mediumpurple1]U[mediumpurple2]B[/][purple_2]9[/][/]",
            79: "[mediumpurple1]U[mediumpurple2]A[/][/]",
            80: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]1[/][/]",
            81: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]2[/][/]",
            82: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]3[/][/]",
            83: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]4[/][/]",
            84: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]5[/][/]",
            85: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]6[/][/]",
            86: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]7[/][/]",
            87: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]8[/][/]",
            88: "[mediumpurple1]U[mediumpurple2]A[/][purple_2]9[/][/]",
            89: "[mediumpurple1]U[mediumpurple2]S[/][/]",
            90: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]1[/][/]",
            91: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]2[/][/]",
            92: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]3[/][/]",
            93: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]4[/][/]",
            94: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]5[/][/]",
            95: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]6[/][/]",
            96: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]7[/][/]",
            97: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]8[/][/]",
            98: "[mediumpurple1]U[mediumpurple2]S[/][purple_2]9[/][/]",
        }.get(self.id, "[mediumpurple1]US9[mediumpurple2]‰ª•‰∏ä[/][/]")

    def __init__(self, _id, min_value, max_value):
        self.id = _id
        self.min_value = min_value
        self.max_value = max_value

    @classmethod
    def object_hook(cls, dct):
        return cls(dct['id'], dct['min_value'], dct['max_value'])


class BaseName:
    id: int
    "ËßíËâ≤IDÔºåÈÄöÂ∏∏‰∏∫4‰ΩçÊï∞Â≠óÔºå‰∏îÈ©¨Â®òÂùá‰∏∫1xxx"
    name: str
    "ËßíËâ≤ÁöÑÊú¨ÂêçÔºåÂ¶ÇÁæéÊµ¶Ê≥¢ÊóÅ"
    nick_name: str = "Êú™Áü•"
    "ÈïøÂ∫¶ÈôêÂÆö‰∏∫2Ê±âÂ≠óÁöÑÁÆÄÁß∞ÔºåÂ¶ÇÁæéÊµ¶Ê≥¢ÊóÅ = > Ê≥¢ÊóÅ"

    def __init__(self, _id: int, _name: str):
        self.id = _id
        self.name = _name

    @classmethod
    def object_hook(cls, dct: dict):
        self = cls(dct['Id'], dct['Name'])
        if 'Nickname' in dct:
            self.nick_name = dct['Nickname']
        return self

    def __str__(self):
        if hasattr(self, 'full_name'):
            return f"<{self.full_name} @ {self.id} aka {self.nick_name}>"
        return f"{self.name} @ {self.id} aka {self.nick_name}"

    def __repr__(self):
        return f"<{self.__class__.__name__}: {str(self)}>"


class SupportCardName(BaseName):
    chara_id: int
    "ÊîØÊè¥Âç°ID"
    type: int
    "ÊîØÊè¥Âç°ÁöÑÁ±ªÂûãÔºàÈÄüËÄêÂäõÊ†πÊô∫ÂèãÂõ¢Ôºâ"

    @property
    def character_name(self) -> str:
        """ËßíËâ≤ÁöÑÊú¨ÂêçÔºåÂ¶ÇÁæéÊµ¶Ê≥¢ÊóÅ"""
        try:
            database = eval('DataBase')
        except NameError:
            database = None
        if database:
            return database.Names[self.chara_id]
        return ""

    @property
    def type_name(self):
        """ÊîØÊè¥Âç°ÁöÑÁ±ªÂûã(Â¶Ç[ÈÄü])"""
        return {101: "[ÈÄü]", 102: "[Âäõ]", 103: "[Ê†π]", 105: "[ËÄê]", 106: "[Êô∫]", 0: "[Âèã]"}.get(self.type, '')

    @property
    def full_name(self):
        """ÊîØÊè¥Âç°ÁöÑÂÖ®ÂêçÔºåÂ¶Ç[„Éü„ÉÉ„Ç∑„Éß„É≥„ÄéÂøÉ„ÅÆÊ†ÑÈ§äË£úÁµ¶„Äè] „Éü„Éõ„Éé„Éñ„É´„Éú„É≥"""
        return f"{self.name}{self.character_name}"

    @property
    def simple_name(self):
        """ÊîØÊè¥Âç°ÁöÑÁÆÄÁß∞ÔºåÂ¶Ç[Êô∫]Ê≥¢ÊóÅÔºå‰∏çËÄÉËôëÂêåÁ±ªÂûãÂêåÈ©¨Â®òÊîØÊè¥Âç°ÁöÑÂå∫ÂàÜ"""
        return f"{self.type_name}{self.nick_name}"

    def __init__(self, _id: int, _name: str, _chara_id: int, _type: int):
        super().__init__(_id, _name)
        self.chara_id = _chara_id
        self.type = _type

    @classmethod
    def object_hook(cls, dct: dict):
        self = cls(dct['Id'], dct['Name'], dct['CharaId'], dct['Type'])
        if 'Nickname' in dct:
            self.nick_name = dct['Nickname']
        return self


class UmaName(BaseName):
    chara_id: int
    "È©¨Â®òID"
    character_name = SupportCardName.character_name
    full_name = SupportCardName.full_name
    "È©¨Â®òÁöÑÂÖ®ÂêçÔºåÂ¶Ç[CODEÔºö„Ç∞„É©„Çµ„Éº„Ç∏„É•] „Éü„Éõ„Éé„Éñ„É´„Éú„É≥"

    def __init__(self, _id: int, _name: str, _chara_id: int = 0):
        super().__init__(_id, _name)
        if _chara_id == 0:
            if (_strid := str(_id))[0] == '9':
                self.chara_id = int(_strid[1:5])
            else:
                self.chara_id = int(_strid[:4])
        else:
            self.chara_id = _chara_id

    @classmethod
    def object_hook(cls, dct: dict):
        self = cls(dct['Id'], dct['Name'], dct['CharaId'])
        if 'Nickname' in dct:
            self.nick_name = dct['Nickname']
        return self
